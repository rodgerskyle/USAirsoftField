{"ast":null,"code":"import _objectSpread from\"/home/kyle/USAirsoftField/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/kyle/USAirsoftField/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import app from'firebase/app';import'firebase/auth';import'firebase/database';require('dotenv').config();var config={apiKey:process.env.REACT_APP_API_KEY,authDomain:process.env.REACT_APP_AUTH_DOMAIN,databaseURL:process.env.REACT_APP_DATABASE_URL,projectId:process.env.REACT_APP_PROJECT_ID,storageBucket:process.env.REACT_APP_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_APP_ID,measurementId:process.env.REACT_APP_MEASUREMENT_ID};var Firebase=function Firebase(){var _this=this;_classCallCheck(this,Firebase);this.doCreateUserWithEmailAndPassword=function(email,password){return _this.auth.createUserWithEmailAndPassword(email,password);};this.doSignInWithEmailAndPassword=function(email,password){return _this.auth.signInWithEmailAndPassword(email,password);};this.doSignOut=function(){return _this.auth.signOut();};this.doPasswordReset=function(email){return _this.auth.sendPasswordResetEmail(email);};this.doPasswordUpdate=function(password){return _this.auth.currentUser.updatePassword(password);};this.onAuthUserListener=function(next,fallback){return _this.auth.onAuthStateChanged(function(authUser){if(authUser){_this.user(authUser.uid).once('value').then(function(snapshot){var dbUser=snapshot.val();// default empty roles\nif(!dbUser.roles){dbUser.roles={};}// merge auth and db user\nauthUser=_objectSpread({uid:authUser.uid,email:authUser.email},dbUser);next(authUser);});}else{fallback();}});};this.user=function(uid){return _this.db.ref(\"users/\".concat(uid));};this.users=function(){return _this.db.ref('users');};app.initializeApp(config);this.auth=app.auth();this.db=app.database();}// *** Auth API ***\n;export default Firebase;","map":{"version":3,"sources":["/home/kyle/USAirsoftField/src/components/Firebase/firebase.js"],"names":["app","require","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","db","ref","users","initializeApp","database"],"mappings":"iSAAA,MAAOA,CAAAA,GAAP,KAAgB,cAAhB,CACA,MAAO,eAAP,CACA,MAAO,mBAAP,CACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,GAEA,GAAMA,CAAAA,MAAM,CAAG,CACXC,MAAM,CAAEC,OAAO,CAACC,GAAR,CAAYC,iBADT,CAEXC,UAAU,CAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFb,CAGXC,WAAW,CAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHd,CAIXC,SAAS,CAAEP,OAAO,CAACC,GAAR,CAAYO,oBAJZ,CAKXC,aAAa,CAAET,OAAO,CAACC,GAAR,CAAYS,wBALhB,CAMXC,iBAAiB,CAAEX,OAAO,CAACC,GAAR,CAAYW,6BANpB,CAOXC,KAAK,CAAEb,OAAO,CAACC,GAAR,CAAYa,gBAPR,CAQXC,aAAa,CAAEf,OAAO,CAACC,GAAR,CAAYe,wBARhB,CAAf,C,GAWMC,CAAAA,Q,CACF,mBAAc,oDAOdC,gCAPc,CAOqB,SAACC,KAAD,CAAQC,QAAR,QAC/B,CAAA,KAAI,CAACC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,CAAgDC,QAAhD,CAD+B,EAPrB,MAUdG,4BAVc,CAUiB,SAACJ,KAAD,CAAQC,QAAR,QAC3B,CAAA,KAAI,CAACC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,CAA4CC,QAA5C,CAD2B,EAVjB,MAadK,SAbc,CAaF,iBAAM,CAAA,KAAI,CAACJ,IAAL,CAAUK,OAAV,EAAN,EAbE,MAedC,eAfc,CAeI,SAAAR,KAAK,QAAI,CAAA,KAAI,CAACE,IAAL,CAAUO,sBAAV,CAAiCT,KAAjC,CAAJ,EAfT,MAiBdU,gBAjBc,CAiBK,SAAAT,QAAQ,QACvB,CAAA,KAAI,CAACC,IAAL,CAAUS,WAAV,CAAsBC,cAAtB,CAAqCX,QAArC,CADuB,EAjBb,MAqBdY,kBArBc,CAqBO,SAACC,IAAD,CAAOC,QAAP,QACjB,CAAA,KAAI,CAACb,IAAL,CAAUc,kBAAV,CAA6B,SAAAC,QAAQ,CAAI,CACrC,GAAIA,QAAJ,CAAc,CACV,KAAI,CAACC,IAAL,CAAUD,QAAQ,CAACE,GAAnB,EACKC,IADL,CACU,OADV,EAEKC,IAFL,CAEU,SAAAC,QAAQ,CAAI,CACd,GAAMC,CAAAA,MAAM,CAAGD,QAAQ,CAACE,GAAT,EAAf,CACA;AACA,GAAI,CAACD,MAAM,CAACE,KAAZ,CAAmB,CACfF,MAAM,CAACE,KAAP,CAAe,EAAf,CACH,CACD;AACAR,QAAQ,gBACJE,GAAG,CAAEF,QAAQ,CAACE,GADV,CAEJnB,KAAK,CAAEiB,QAAQ,CAACjB,KAFZ,EAGDuB,MAHC,CAAR,CAKAT,IAAI,CAACG,QAAD,CAAJ,CACH,CAfL,EAgBH,CAjBD,IAiBO,CACHF,QAAQ,GACX,CACJ,CArBD,CADiB,EArBP,MA+CdG,IA/Cc,CA+CP,SAAAC,GAAG,QAAI,CAAA,KAAI,CAACO,EAAL,CAAQC,GAAR,iBAAqBR,GAArB,EAAJ,EA/CI,MAiDdS,KAjDc,CAiDN,iBAAM,CAAA,KAAI,CAACF,EAAL,CAAQC,GAAR,CAAY,OAAZ,CAAN,EAjDM,CACVlD,GAAG,CAACoD,aAAJ,CAAkBlD,MAAlB,EAEA,KAAKuB,IAAL,CAAYzB,GAAG,CAACyB,IAAJ,EAAZ,CACA,KAAKwB,EAAL,CAAUjD,GAAG,CAACqD,QAAJ,EAAV,CACH,CACD;CA+CJ,cAAehC,CAAAA,QAAf","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nrequire('dotenv').config();\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n\n        this.auth = app.auth();\n        this.db = app.database();\n    }\n    // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n    // *** Merge Auth and DB User API *** //\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                this.user(authUser.uid)\n                    .once('value')\n                    .then(snapshot => {\n                        const dbUser = snapshot.val();\n                        // default empty roles\n                        if (!dbUser.roles) {\n                            dbUser.roles = {};\n                        }\n                        // merge auth and db user\n                        authUser = {\n                            uid: authUser.uid,\n                            email: authUser.email,\n                            ...dbUser,\n                        };\n                        next(authUser);\n                    });\n            } else {\n                fallback();\n            }\n        });\n\n    // User API\n\n    user = uid => this.db.ref(`users/${uid}`);\n\n    users = () => this.db.ref('users');\n\n}\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}