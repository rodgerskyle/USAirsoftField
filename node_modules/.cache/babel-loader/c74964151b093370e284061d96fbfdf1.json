{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\n\nrequire('dotenv').config();\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\nclass Firebase {\n  constructor() {\n    this.RegisterUser = (email, password) => {\n      this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          } // merge auth and db user\n\n\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            ...dbUser\n          };\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.storage = img => this.st.ref().child(`ranks/${img}`);\n\n    this.pictures = img => this.st.ref().child(`images/${img}`);\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = app.database();\n    this.st = app.storage();\n  } // *** Register New Account ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/kyle/Csci/capstone2/usairsoft/src/components/Firebase/firebase.js"],"names":["app","require","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","Firebase","constructor","RegisterUser","email","password","auth","createUserWithEmailAndPassword","doCreateUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","storage","img","st","ref","child","pictures","db","users","initializeApp","database"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\nrequire('dotenv').config();\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n\n        this.auth = app.auth();\n        this.db = app.database();\n        this.st = app.storage();\n    }\n    // *** Register New Account ***\n    RegisterUser = (email, password) => {\n        this.auth.createUserWithEmailAndPassword(email, password);\n    }\n\n    // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n    // *** Merge Auth and DB User API *** //\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                this.user(authUser.uid)\n                    .once('value')\n                    .then(snapshot => {\n                        const dbUser = snapshot.val();\n                        // default empty roles\n                        if (!dbUser.roles) {\n                            dbUser.roles = [];\n                        }\n                        // merge auth and db user\n                        authUser = {\n                            uid: authUser.uid,\n                            email: authUser.email,\n                            ...dbUser,\n                        };\n                        next(authUser);\n                    });\n            } else {\n                fallback();\n            }\n        });\n\n    // Database API\n\n    storage = img => this.st.ref().child(`ranks/${img}`);\n\n    pictures = img => this.st.ref().child(`images/${img}`);\n\n    // User API\n\n    user = uid => this.db.ref(`users/${uid}`);\n\n    users = () => this.db.ref('users');\n\n}\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}