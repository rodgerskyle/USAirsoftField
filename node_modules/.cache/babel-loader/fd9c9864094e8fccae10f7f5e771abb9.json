{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/Csci/capstone2/usairsoft/src/components/session/withAuthentication.js\";\nimport React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        if (authUser) {\n          this.props.firebase.user(authUser.uid).once('value').then(snapshot => {\n            const dbUser = snapshot.val(); // default empty roles\n\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            } // merge auth and db user\n\n\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              ...dbUser\n            };\n            this.setState({\n              authUser\n            });\n          });\n        } else {\n          this.setState({\n            authUser: null\n          });\n        }\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(AuthUserContext.Provider, {\n        value: this.state.authUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Component, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      })));\n    }\n\n  }\n\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/Users/kyle/Csci/capstone2/usairsoft/src/components/session/withAuthentication.js"],"names":["React","AuthUserContext","withFirebase","withAuthentication","Component","WithAuthentication","constructor","props","state","authUser","componentDidMount","listener","firebase","auth","onAuthStateChanged","user","uid","once","then","snapshot","dbUser","val","roles","email","setState","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,MAAMC,kBAAkB,GAAGC,SAAS,IAAI;AACtC,QAAMC,kBAAN,SAAiCL,KAAK,CAACI,SAAvC,CAAiD;AAC/CE,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AAEA,WAAKC,KAAL,GAAa;AACXC,QAAAA,QAAQ,EAAE;AADC,OAAb;AAGD;;AAEDC,IAAAA,iBAAiB,GAAG;AAClB,WAAKC,QAAL,GAAgB,KAAKJ,KAAL,CAAWK,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CACdL,QAAQ,IAAI;AACR,YAAIA,QAAJ,EAAc;AACV,eAAKF,KAAL,CAAWK,QAAX,CACCG,IADD,CACMN,QAAQ,CAACO,GADf,EAECC,IAFD,CAEM,OAFN,EAGCC,IAHD,CAGMC,QAAQ,IAAI;AAClB,kBAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADkB,CAElB;;AACA,gBAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACnBF,cAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACC,aALiB,CAMlB;;;AACAb,YAAAA,QAAQ,GAAG;AACXO,cAAAA,GAAG,EAAEP,QAAQ,CAACO,GADH;AAEXO,cAAAA,KAAK,EAAEd,QAAQ,CAACc,KAFL;AAGX,iBAAGH;AAHQ,aAAX;AAKA,iBAAKI,QAAL,CAAc;AAAEf,cAAAA;AAAF,aAAd;AACC,WAhBD;AAiBC,SAlBL,MAkBW;AACP,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACC;AACJ,OAvBS,CAAhB;AAyBD;;AAEDgB,IAAAA,oBAAoB,GAAG;AACrB,WAAKd,QAAL;AACD;;AAEDe,IAAAA,MAAM,GAAG;AACP,0BACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,QAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,oBAAe,KAAKF,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD;;AA/C8C;;AAkDjD,SAAOL,YAAY,CAACG,kBAAD,CAAnB;AACD,CApDD;;AAsDA,eAAeF,kBAAf","sourcesContent":["import React from 'react';\n \nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n \nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n \n      this.state = {\n        authUser: null,\n      };\n    }\n \n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n            if (authUser) {\n                this.props.firebase\n                .user(authUser.uid)\n                .once('value')\n                .then(snapshot => {\n                const dbUser = snapshot.val();\n                // default empty roles\n                if (!dbUser.roles) {\n                dbUser.roles = {};\n                }\n                // merge auth and db user\n                authUser = {\n                uid: authUser.uid,\n                email: authUser.email,\n                ...dbUser,\n                };\n                this.setState({ authUser });\n                });\n                } else {\n                this.setState({ authUser: null });\n                }\n            }\n      );\n    }\n \n    componentWillUnmount() {\n      this.listener();\n    }\n \n    render() {\n      return (\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n \n  return withFirebase(WithAuthentication);\n};\n \nexport default withAuthentication;"]},"metadata":{},"sourceType":"module"}