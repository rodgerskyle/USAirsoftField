{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/Csci/capstone2/usairsoft/src/components/session/withAuthorization.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { withFirebase } from '../Firebase';\nimport AuthUserContext from './context';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        if (authUser) {\n          this.props.firebase.user(authUser.uid).once('value').then(snapshot => {\n            const dbUser = snapshot.val(); // default empty roles\n\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            } // merge auth and db user\n\n\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              ...dbUser\n            };\n\n            if (!condition(authUser)) {\n              this.props.history.push(\"/login\");\n            }\n          });\n        } else {\n          this.props.history.push(\"/login\");\n        }\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(AuthUserContext.Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, authUser => condition(authUser) ? /*#__PURE__*/React.createElement(Component, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 47\n        }\n      })) : null);\n    }\n\n  }\n\n  return compose(withRouter, withFirebase)(WithAuthorization);\n};\n\nexport default withAuthorization;","map":{"version":3,"sources":["/Users/kyle/Csci/capstone2/usairsoft/src/components/session/withAuthorization.js"],"names":["React","withRouter","compose","withFirebase","AuthUserContext","withAuthorization","condition","Component","WithAuthorization","componentDidMount","listener","props","firebase","auth","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","email","history","push","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAOC,eAAP,MAA4B,WAA5B;;AAGA,MAAMC,iBAAiB,GAAGC,SAAS,IAAIC,SAAS,IAAI;AAChD,QAAMC,iBAAN,SAAgCR,KAAK,CAACO,SAAtC,CAAgD;AAC5CE,IAAAA,iBAAiB,GAAG;AAChB,WAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CACZC,QAAQ,IAAI;AACR,YAAIA,QAAJ,EAAc;AACV,eAAKJ,KAAL,CAAWC,QAAX,CACKI,IADL,CACUD,QAAQ,CAACE,GADnB,EAEKC,IAFL,CAEU,OAFV,EAGKC,IAHL,CAGUC,QAAQ,IAAI;AACd,kBAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADc,CAEd;;AACA,gBAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACfF,cAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACH,aALa,CAMd;;;AACAR,YAAAA,QAAQ,GAAG;AACPE,cAAAA,GAAG,EAAEF,QAAQ,CAACE,GADP;AAEPO,cAAAA,KAAK,EAAET,QAAQ,CAACS,KAFT;AAGP,iBAAGH;AAHI,aAAX;;AAKA,gBAAI,CAACf,SAAS,CAACS,QAAD,CAAd,EAA0B;AACtB,mBAAKJ,KAAL,CAAWc,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,WAlBL;AAmBH,SApBD,MAoBO;AACH,eAAKf,KAAL,CAAWc,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,OAzBW,CAAhB;AA2BH;;AAEDC,IAAAA,oBAAoB,GAAG;AACnB,WAAKjB,QAAL;AACH;;AAEDkB,IAAAA,MAAM,GAAG;AACL,0BACI,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKb,QAAQ,IACLT,SAAS,CAACS,QAAD,CAAT,gBAAsB,oBAAC,SAAD,oBAAe,KAAKJ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtB,GAAsD,IAF9D,CADJ;AAOH;;AA3C2C;;AA8ChD,SAAOT,OAAO,CACVD,UADU,EAEVE,YAFU,CAAP,CAGLK,iBAHK,CAAP;AAIH,CAnDD;;AAqDA,eAAeH,iBAAf","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from '../Firebase';\nimport AuthUserContext from './context';\n\n\nconst withAuthorization = condition => Component => {\n    class WithAuthorization extends React.Component {\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    if (authUser) {\n                        this.props.firebase\n                            .user(authUser.uid)\n                            .once('value')\n                            .then(snapshot => {\n                                const dbUser = snapshot.val();\n                                // default empty roles\n                                if (!dbUser.roles) {\n                                    dbUser.roles = {};\n                                }\n                                // merge auth and db user\n                                authUser = {\n                                    uid: authUser.uid,\n                                    email: authUser.email,\n                                    ...dbUser,\n                                };\n                                if (!condition(authUser)) {\n                                    this.props.history.push(\"/login\");\n                                }\n                            });\n                    } else {\n                        this.props.history.push(\"/login\");\n                    }\n                }\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Consumer>\n                    {authUser =>\n                        condition(authUser) ? <Component {...this.props} /> : null\n                    }\n                </AuthUserContext.Consumer>\n            );\n        }\n    }\n\n    return compose(\n        withRouter,\n        withFirebase,\n    )(WithAuthorization);\n};\n\nexport default withAuthorization;"]},"metadata":{},"sourceType":"module"}